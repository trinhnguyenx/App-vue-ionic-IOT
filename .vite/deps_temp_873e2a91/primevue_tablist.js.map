{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/primevue@4.0.2_vue@3.4.31_typescript@5.5.3_/node_modules/src/tablist/style/TabListStyle.js", "../../node_modules/.pnpm/primevue@4.0.2_vue@3.4.31_typescript@5.5.3_/node_modules/src/tablist/BaseTabList.vue", "../../node_modules/.pnpm/primevue@4.0.2_vue@3.4.31_typescript@5.5.3_/node_modules/src/tablist/TabList.vue", "../../node_modules/.pnpm/primevue@4.0.2_vue@3.4.31_typescript@5.5.3_/node_modules/src/tablist/TabList.vue?vue&type=template&id=1fe1e838&lang.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst classes = {\n    root: 'p-tablist',\n    content: ({ instance }) => [\n        'p-tablist-content',\n        {\n            'p-tablist-viewport': instance.$pcTabs.scrollable\n        }\n    ],\n    tabList: 'p-tablist-tab-list',\n    activeBar: 'p-tablist-active-bar',\n    prevButton: 'p-tablist-prev-button p-tablist-nav-button',\n    nextButton: 'p-tablist-next-button p-tablist-nav-button'\n};\n\nexport default BaseStyle.extend({\n    name: 'tablist',\n    classes\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TabListStyle from 'primevue/tablist/style';\n\nexport default {\n    name: 'BaseTabList',\n    extends: BaseComponent,\n    props: {},\n    style: TabListStyle,\n    provide() {\n        return {\n            $pcTabList: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div ref=\"list\" :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <button\n            v-if=\"showNavigators && isPrevButtonEnabled\"\n            ref=\"prevButton\"\n            v-ripple\n            :class=\"cx('prevButton')\"\n            :aria-label=\"prevButtonAriaLabel\"\n            :tabindex=\"$pcTabs.tabindex\"\n            @click=\"onPrevButtonClick\"\n            v-bind=\"ptm('prevButton')\"\n            data-pc-group-section=\"navigator\"\n        >\n            <component :is=\"templates.previcon || 'ChevronLeftIcon'\" aria-hidden=\"true\" v-bind=\"ptm('prevIcon')\" />\n        </button>\n        <div ref=\"content\" :class=\"cx('content')\" @scroll=\"onScroll\" v-bind=\"ptm('content')\">\n            <div ref=\"tabs\" :class=\"cx('tabList')\" role=\"tablist\" :aria-orientation=\"$pcTabs.orientation || 'horizontal'\" v-bind=\"ptm('tabList')\">\n                <slot></slot>\n                <span ref=\"inkbar\" :class=\"cx('activeBar')\" role=\"presentation\" aria-hidden=\"true\" v-bind=\"ptm('activeBar')\"></span>\n            </div>\n        </div>\n        <button\n            v-if=\"showNavigators && isNextButtonEnabled\"\n            ref=\"nextButton\"\n            v-ripple\n            :class=\"cx('nextButton')\"\n            :aria-label=\"nextButtonAriaLabel\"\n            :tabindex=\"$pcTabs.tabindex\"\n            @click=\"onNextButtonClick\"\n            v-bind=\"ptm('nextButton')\"\n            data-pc-group-section=\"navigator\"\n        >\n            <component :is=\"templates.nexticon || 'ChevronRightIcon'\" aria-hidden=\"true\" v-bind=\"ptm('nextIcon')\" />\n        </button>\n    </div>\n</template>\n\n<script>\nimport { findSingle, getHeight, getOffset, getOuterHeight, getOuterWidth, getWidth } from '@primeuix/utils/dom';\nimport ChevronLeftIcon from '@primevue/icons/chevronleft';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport BaseTabList from './BaseTabList.vue';\nimport Ripple from 'primevue/ripple';\n\nexport default {\n    name: 'TabList',\n    extends: BaseTabList,\n    inheritAttrs: false,\n    inject: ['$pcTabs'],\n    data() {\n        return {\n            isPrevButtonEnabled: false,\n            isNextButtonEnabled: true\n        };\n    },\n    resizeObserver: undefined,\n    watch: {\n        showNavigators(newValue) {\n            newValue ? this.bindResizeObserver() : this.unbindResizeObserver();\n        },\n        activeValue: {\n            flush: 'post',\n            handler() {\n                this.updateInkBar();\n            }\n        }\n    },\n    mounted() {\n        this.$nextTick(() => {\n            this.updateInkBar();\n        });\n\n        if (this.showNavigators) {\n            this.updateButtonState();\n            this.bindResizeObserver();\n        }\n    },\n    updated() {\n        this.showNavigators && this.updateButtonState();\n    },\n    beforeUnmount() {\n        this.unbindResizeObserver();\n    },\n    methods: {\n        onScroll(event) {\n            this.showNavigators && this.updateButtonState();\n\n            event.preventDefault();\n        },\n        onPrevButtonClick() {\n            const content = this.$refs.content;\n            const width = getWidth(content);\n            const pos = content.scrollLeft - width;\n\n            content.scrollLeft = pos <= 0 ? 0 : pos;\n        },\n        onNextButtonClick() {\n            const content = this.$refs.content;\n            const width = getWidth(content) - this.getVisibleButtonWidths();\n            const pos = content.scrollLeft + width;\n            const lastPos = content.scrollWidth - width;\n\n            content.scrollLeft = pos >= lastPos ? lastPos : pos;\n        },\n        bindResizeObserver() {\n            this.resizeObserver = new ResizeObserver(() => this.updateButtonState());\n            this.resizeObserver.observe(this.$refs.list);\n        },\n        unbindResizeObserver() {\n            this.resizeObserver?.unobserve(this.$refs.list);\n            this.resizeObserver = undefined;\n        },\n        updateInkBar() {\n            const { content, inkbar, tabs } = this.$refs;\n            const activeTab = findSingle(content, '[data-pc-name=\"tab\"][data-p-active=\"true\"]');\n\n            if (this.$pcTabs.isVertical()) {\n                inkbar.style.height = getOuterHeight(activeTab) + 'px';\n                inkbar.style.top = getOffset(activeTab).top - getOffset(tabs).top + 'px';\n            } else {\n                inkbar.style.width = getOuterWidth(activeTab) + 'px';\n                inkbar.style.left = getOffset(activeTab).left - getOffset(tabs).left + 'px';\n            }\n        },\n        updateButtonState() {\n            const { list, content } = this.$refs;\n            const { scrollLeft, scrollTop, scrollWidth, scrollHeight, offsetWidth, offsetHeight } = content;\n            const [width, height] = [getWidth(content), getHeight(content)];\n\n            if (this.$pcTabs.isVertical()) {\n                this.isPrevButtonEnabled = scrollTop !== 0;\n                this.isNextButtonEnabled = list.offsetHeight >= offsetHeight && parseInt(scrollTop) !== scrollHeight - height;\n            } else {\n                this.isPrevButtonEnabled = scrollLeft !== 0;\n                this.isNextButtonEnabled = list.offsetWidth >= offsetWidth && parseInt(scrollLeft) !== scrollWidth - width;\n            }\n        },\n        getVisibleButtonWidths() {\n            const { prevBtn, nextBtn } = this.$refs;\n\n            return [prevBtn, nextBtn].reduce((acc, el) => (el ? acc + getWidth(el) : acc), 0);\n        }\n    },\n    computed: {\n        templates() {\n            return this.$pcTabs.$slots;\n        },\n        activeValue() {\n            return this.$pcTabs.d_value;\n        },\n        showNavigators() {\n            return this.$pcTabs.scrollable && this.$pcTabs.showNavigators;\n        },\n        prevButtonAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.previous : undefined;\n        },\n        nextButtonAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.next : undefined;\n        }\n    },\n    components: {\n        ChevronLeftIcon,\n        ChevronRightIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n", "<template>\n    <div ref=\"list\" :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <button\n            v-if=\"showNavigators && isPrevButtonEnabled\"\n            ref=\"prevButton\"\n            v-ripple\n            :class=\"cx('prevButton')\"\n            :aria-label=\"prevButtonAriaLabel\"\n            :tabindex=\"$pcTabs.tabindex\"\n            @click=\"onPrevButtonClick\"\n            v-bind=\"ptm('prevButton')\"\n            data-pc-group-section=\"navigator\"\n        >\n            <component :is=\"templates.previcon || 'ChevronLeftIcon'\" aria-hidden=\"true\" v-bind=\"ptm('prevIcon')\" />\n        </button>\n        <div ref=\"content\" :class=\"cx('content')\" @scroll=\"onScroll\" v-bind=\"ptm('content')\">\n            <div ref=\"tabs\" :class=\"cx('tabList')\" role=\"tablist\" :aria-orientation=\"$pcTabs.orientation || 'horizontal'\" v-bind=\"ptm('tabList')\">\n                <slot></slot>\n                <span ref=\"inkbar\" :class=\"cx('activeBar')\" role=\"presentation\" aria-hidden=\"true\" v-bind=\"ptm('activeBar')\"></span>\n            </div>\n        </div>\n        <button\n            v-if=\"showNavigators && isNextButtonEnabled\"\n            ref=\"nextButton\"\n            v-ripple\n            :class=\"cx('nextButton')\"\n            :aria-label=\"nextButtonAriaLabel\"\n            :tabindex=\"$pcTabs.tabindex\"\n            @click=\"onNextButtonClick\"\n            v-bind=\"ptm('nextButton')\"\n            data-pc-group-section=\"navigator\"\n        >\n            <component :is=\"templates.nexticon || 'ChevronRightIcon'\" aria-hidden=\"true\" v-bind=\"ptm('nextIcon')\" />\n        </button>\n    </div>\n</template>\n\n<script>\nimport { findSingle, getHeight, getOffset, getOuterHeight, getOuterWidth, getWidth } from '@primeuix/utils/dom';\nimport ChevronLeftIcon from '@primevue/icons/chevronleft';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport BaseTabList from './BaseTabList.vue';\nimport Ripple from 'primevue/ripple';\n\nexport default {\n    name: 'TabList',\n    extends: BaseTabList,\n    inheritAttrs: false,\n    inject: ['$pcTabs'],\n    data() {\n        return {\n            isPrevButtonEnabled: false,\n            isNextButtonEnabled: true\n        };\n    },\n    resizeObserver: undefined,\n    watch: {\n        showNavigators(newValue) {\n            newValue ? this.bindResizeObserver() : this.unbindResizeObserver();\n        },\n        activeValue: {\n            flush: 'post',\n            handler() {\n                this.updateInkBar();\n            }\n        }\n    },\n    mounted() {\n        this.$nextTick(() => {\n            this.updateInkBar();\n        });\n\n        if (this.showNavigators) {\n            this.updateButtonState();\n            this.bindResizeObserver();\n        }\n    },\n    updated() {\n        this.showNavigators && this.updateButtonState();\n    },\n    beforeUnmount() {\n        this.unbindResizeObserver();\n    },\n    methods: {\n        onScroll(event) {\n            this.showNavigators && this.updateButtonState();\n\n            event.preventDefault();\n        },\n        onPrevButtonClick() {\n            const content = this.$refs.content;\n            const width = getWidth(content);\n            const pos = content.scrollLeft - width;\n\n            content.scrollLeft = pos <= 0 ? 0 : pos;\n        },\n        onNextButtonClick() {\n            const content = this.$refs.content;\n            const width = getWidth(content) - this.getVisibleButtonWidths();\n            const pos = content.scrollLeft + width;\n            const lastPos = content.scrollWidth - width;\n\n            content.scrollLeft = pos >= lastPos ? lastPos : pos;\n        },\n        bindResizeObserver() {\n            this.resizeObserver = new ResizeObserver(() => this.updateButtonState());\n            this.resizeObserver.observe(this.$refs.list);\n        },\n        unbindResizeObserver() {\n            this.resizeObserver?.unobserve(this.$refs.list);\n            this.resizeObserver = undefined;\n        },\n        updateInkBar() {\n            const { content, inkbar, tabs } = this.$refs;\n            const activeTab = findSingle(content, '[data-pc-name=\"tab\"][data-p-active=\"true\"]');\n\n            if (this.$pcTabs.isVertical()) {\n                inkbar.style.height = getOuterHeight(activeTab) + 'px';\n                inkbar.style.top = getOffset(activeTab).top - getOffset(tabs).top + 'px';\n            } else {\n                inkbar.style.width = getOuterWidth(activeTab) + 'px';\n                inkbar.style.left = getOffset(activeTab).left - getOffset(tabs).left + 'px';\n            }\n        },\n        updateButtonState() {\n            const { list, content } = this.$refs;\n            const { scrollLeft, scrollTop, scrollWidth, scrollHeight, offsetWidth, offsetHeight } = content;\n            const [width, height] = [getWidth(content), getHeight(content)];\n\n            if (this.$pcTabs.isVertical()) {\n                this.isPrevButtonEnabled = scrollTop !== 0;\n                this.isNextButtonEnabled = list.offsetHeight >= offsetHeight && parseInt(scrollTop) !== scrollHeight - height;\n            } else {\n                this.isPrevButtonEnabled = scrollLeft !== 0;\n                this.isNextButtonEnabled = list.offsetWidth >= offsetWidth && parseInt(scrollLeft) !== scrollWidth - width;\n            }\n        },\n        getVisibleButtonWidths() {\n            const { prevBtn, nextBtn } = this.$refs;\n\n            return [prevBtn, nextBtn].reduce((acc, el) => (el ? acc + getWidth(el) : acc), 0);\n        }\n    },\n    computed: {\n        templates() {\n            return this.$pcTabs.$slots;\n        },\n        activeValue() {\n            return this.$pcTabs.d_value;\n        },\n        showNavigators() {\n            return this.$pcTabs.scrollable && this.$pcTabs.showNavigators;\n        },\n        prevButtonAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.previous : undefined;\n        },\n        nextButtonAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.next : undefined;\n        }\n    },\n    components: {\n        ChevronLeftIcon,\n        ChevronRightIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["classes", "root", "content", "_ref", "instance", "$pcTabs", "scrollable", "tabList", "activeBar", "prevButton", "nextButton", "BaseStyle", "extend", "name", "name", "BaseComponent", "props", "style", "TabListStyle", "provide", "$pcTabList", "$parentInstance", "script", "BaseTabList", "inheritAttrs", "inject", "data", "isPrevButtonEnabled", "isNextButtonEnabled", "resizeObserver", "undefined", "watch", "showNavigators", "newValue", "bindResizeObserver", "unbindResizeObserver", "activeValue", "flush", "handler", "updateInkBar", "mounted", "_this", "$nextTick", "updateButtonState", "updated", "beforeUnmount", "methods", "onScroll", "event", "preventDefault", "onPrevButtonClick", "content", "$refs", "width", "getWidth", "pos", "scrollLeft", "onNextButtonClick", "getVisibleButtonWidths", "lastPos", "scrollWidth", "_this2", "ResizeObserver", "observe", "list", "_this$resizeObserver", "unobserve", "_this$$refs", "inkbar", "tabs", "activeTab", "findSingle", "$pcTabs", "isVertical", "height", "getOuterHeight", "top", "getOffset", "getOuterWidth", "left", "_this$$refs2", "scrollTop", "scrollHeight", "offsetWidth", "offsetHeight", "_ref", "getHeight", "parseInt", "_this$$refs3", "prevBtn", "nextBtn", "reduce", "acc", "el", "computed", "templates", "$slots", "d_value", "scrollable", "prevButtonAriaLabel", "$primevue", "config", "locale", "aria", "previous", "nextButtonAriaLabel", "next", "components", "ChevronLeftIcon", "ChevronRightIcon", "directives", "ripple", "Ripple", "_openBlock", "_createElementBlock", "_mergeProps", "ref", "_ctx", "cx", "ptmi", "$options", "$data", "_withDirectives", "tabindex", "onClick", "apply", "arguments", "ptm", "_createBlock", "_resolveDynamicComponent", "previcon", "_createElementVNode", "role", "orientation", "_renderSlot", "nexticon"]
}
